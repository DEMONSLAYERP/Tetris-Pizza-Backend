openapi: 3.0.3
info:
  title: Tetris Pizza API
  description: API for an online pizza shop, managing products, toppings, promotions, orders, and addresses.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local Development Server

tags:
  - name: Products
    description: API for managing products, categories, and options
  - name: Toppings
    description: API for managing pizza toppings
  - name: Promotions
    description: API for managing discount coupons and promotions
  - name: Combo Sets
    description: API for managing combo sets and their items
  - name: Orders
    description: API for managing customer orders and their items
  - name: Addresses
    description: API for managing user addresses

paths:
  #========================== Products ==========================
  /products:
    get:
      tags:
        - Products
      summary: Get all available products
      responses:
        '200':
          description: A JSON array of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - Products
      summary: Add a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Product created successfully
        '409':
          description: Product with this name already exists

  /products/categories:
    get:
      tags:
        - Products
      summary: Get all unique product categories
      responses:
        '200':
          description: An array of category names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["Pizza", "Appetizer", "Drink"]

  /products/category/{categoryName}:
    get:
      tags:
        - Products
      summary: Get all products in a specific category
      parameters:
        - name: categoryName
          in: path
          required: true
          schema:
            type: string
            example: "Pizza"
      responses:
        '200':
          description: An array of products in the specified category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      tags:
        - Products
      summary: Update a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateInput'
      responses:
        '200':
          description: Product updated successfully
        '404':
          description: Product not found
    delete:
      tags:
        - Products
      summary: Delete a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found

  /products/{id}/options:
    get:
      tags:
        - Products
      summary: Get all options for a specific product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: An array of product options
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductOption'

  #========================== Toppings ==========================
  /toppings:
    get:
      tags:
        - Toppings
      summary: Get all available toppings
      responses:
        '200':
          description: A JSON array of toppings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topping'
    post:
      tags:
        - Toppings
      summary: Add a new topping
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToppingInput'
      responses:
        '201':
          description: Topping created successfully

  /toppings/category/{category}:
    get:
      tags:
        - Toppings
      summary: Get toppings by category
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
            example: "Meat"
      responses:
        '200':
          description: An array of toppings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topping'

  /toppings/{id}:
    get:
      tags:
        - Toppings
      summary: Get a topping by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Topping data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topping'
        '404':
          description: Topping not found
    put:
      tags:
        - Toppings
      summary: Update a topping by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToppingUpdateInput'
      responses:
        '200':
          description: Topping updated successfully
    delete:
      tags:
        - Toppings
      summary: Delete a topping by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Topping deleted successfully

  #========================== Promotions ==========================
  /promotions:
    get:
      tags:
        - Promotions
      summary: Get all active promotions
      responses:
        '200':
          description: A JSON array of promotions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promotion'
    post:
      tags:
        - Promotions
      summary: Add a new promotion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionInput'
      responses:
        '201':
          description: Promotion created successfully

  /promotions/{id}:
    get:
      tags:
        - Promotions
      summary: Get a promotion by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Promotion data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
        '404':
          description: Promotion not found
    put:
      tags:
        - Promotions
      summary: Update a promotion by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionInput'
      responses:
        '200':
          description: Promotion updated successfully
    delete:
      tags:
        - Promotions
      summary: Delete a promotion by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Promotion deleted successfully

  #========================== Combo Sets ==========================
  /combo-sets:
    get:
      tags:
        - Combo Sets
      summary: Get all active combo sets
      responses:
        '200':
          description: A JSON array of combo sets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComboSet'
    post:
      tags:
        - Combo Sets
      summary: Add a new combo set
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComboSetInput'
      responses:
        '201':
          description: Combo set created successfully

  /combo-sets/{id}:
    get:
      tags:
        - Combo Sets
      summary: Get a combo set by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Combo set data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComboSet'
        '404':
          description: Combo set not found
    put:
      tags:
        - Combo Sets
      summary: Update a combo set by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComboSetInput'
      responses:
        '200':
          description: Combo set updated successfully
    delete:
      tags:
        - Combo Sets
      summary: Delete a combo set by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Combo set deleted successfully

  #========================== Combo Set Items ==========================
  /combo-set-items:
    get:
      tags:
        - Combo Sets
      summary: Get all combo set items
      responses:
        '200':
          description: A JSON array of all combo set items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComboSetItem'
    post:
      tags:
        - Combo Sets
      summary: Add a new item to a combo set
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComboSetItemInput'
      responses:
        '201':
          description: Combo set item created successfully

  /combo-set-items/combo/{id}:
    get:
      tags:
        - Combo Sets
      summary: Get all items for a specific combo set
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the combo set.
          schema:
            type: integer
      responses:
        '200':
          description: An array of combo set items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComboSetItem'
        '404':
          description: No items found for this combo set ID

  /combo-set-items/{id}:
    put:
      tags:
        - Combo Sets
      summary: Update a combo set item by its item ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the item to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComboSetItemInput'
      responses:
        '200':
          description: Combo set item updated successfully
    delete:
      tags:
        - Combo Sets
      summary: Delete a combo set item by its item ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the item to delete.
          schema:
            type: integer
      responses:
        '200':
          description: Combo set item deleted successfully

  #========================== Addresses ==========================
  /addresses:
    get:
      tags:
        - Addresses
      summary: Get all addresses
      responses:
        '200':
          description: A JSON array of all addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
    post:
      tags:
        - Addresses
      summary: Add a new address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressInput'
      responses:
        '201':
          description: Address created successfully

  /addresses/user/{id}:
    get:
      tags:
        - Addresses
      summary: Get all addresses for a specific user
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user.
          schema:
            type: integer
      responses:
        '200':
          description: An array of addresses for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'

  /addresses/{id}:
    get:
      tags:
        - Addresses
      summary: Get an address by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Address data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '404':
          description: Address not found
    put:
      tags:
        - Addresses
      summary: Update an address by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressInput'
      responses:
        '200':
          description: Address updated successfully
    delete:
      tags:
        - Addresses
      summary: Delete an address by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Address deleted successfully

  #========================== Orders ==========================
  /orders:
    get:
      tags:
        - Orders
      summary: Get all orders
      responses:
        '200':
          description: A JSON array of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
        - Orders
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '201':
          description: Order created successfully

  /orders/user/{id}:
    get:
      tags:
        - Orders
      summary: Get all orders for a specific user
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user.
          schema:
            type: integer
      responses:
        '200':
          description: An array of orders for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get an order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    put:
      tags:
        - Orders
      summary: Update an order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdateInput'
      responses:
        '200':
          description: Order updated successfully
    delete:
      tags:
        - Orders
      summary: Delete an order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order deleted successfully

  #========================== Order Items ==========================
  /order-items:
    get:
      tags:
        - Orders
      summary: Get all order items
      responses:
        '200':
          description: A JSON array of all order items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderItem'
    post:
      tags:
        - Orders
      summary: Add a new item to an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemInput'
      responses:
        '201':
          description: Order item created successfully

  /order-items/order/{id}:
    get:
      tags:
        - Orders
      summary: Get all items for a specific order
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the order.
          schema:
            type: integer
      responses:
        '200':
          description: An array of order items for the order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderItem'
        '404':
          description: No items found for this order ID

  /order-items/{id}:
    get:
      tags:
        - Orders
      summary: Get an order item by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order item data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '404':
          description: Order item not found
    put:
      tags:
        - Orders
      summary: Update an order item by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemInput'
      responses:
        '200':
          description: Order item updated successfully
    delete:
      tags:
        - Orders
      summary: Delete an order item by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order item deleted successfully

components:
  schemas:
    Product:
      type: object
      properties:
        product_id:
          type: integer
          example: 13
        name:
          type: string
          example: "พิซซ่าฮาวายเอี้ยน"
        description:
          type: string
          example: "แฮม, เบคอน และสับปะรด บนซอสพิซซ่ารสเข้มข้น"
        price:
          type: number
          format: float
          example: 319.00
        category:
          type: string
          example: "Pizza"
        image_url:
          type: string
          example: "hawaiian.jpg"
        is_available:
          type: boolean
          example: true
    ProductInput:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        category:
          type: string
    ProductUpdateInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category:
          type: string
        image_url:
          type: string
        is_available:
          type: boolean
    ProductOption:
      type: object
      properties:
        option_id:
          type: integer
        option_type:
          type: string
          example: "Crust"
        option_name:
          type: string
          example: "ขอบชีส"
        additional_price:
          type: number
          format: float
          example: 120.00
    Topping:
      type: object
      properties:
        topping_id:
          type: integer
          example: 1
        name:
          type: string
          example: "เปปเปอโรนี"
        price:
          type: number
          example: 59.00
        category:
          type: string
          example: "Meat"
        is_available:
          type: boolean
    ToppingInput:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        category:
          type: string
    ToppingUpdateInput:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        category:
          type: string
        is_available:
          type: boolean
    Promotion:
      type: object
      properties:
        promotion_id:
          type: integer
        coupon_code:
          type: string
        description:
          type: string
        discount_type:
          type: string
        discount_value:
          type: number
        min_purchase:
          type: number
        start_date:
          type: string
          format: date-time
        expiry_date:
          type: string
          format: date-time
    PromotionInput:
      type: object
      properties:
        coupon_code:
          type: string
        description:
          type: string
        discount_type:
          type: string
          example: "Fixed Amount"
        discount_value:
          type: number
        min_purchase:
          type: number
        start_date:
          type: string
          format: date-time
        expiry_date:
          type: string
          format: date-time
    ComboSet:
      type: object
      properties:
        combo_set_id:
          type: integer
        name:
          type: string
          example: "My Box A"
        description:
          type: string
        base_price:
          type: number
        image_url:
          type: string
        is_active:
          type: boolean
    ComboSetInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        base_price:
          type: number
        image_url:
          type: string
        is_active:
          type: boolean
    ComboSetItem:
      type: object
      properties:
        item_id:
          type: integer
        combo_set_id:
          type: integer
        category_name:
          type: string
          example: "พิซซ่าถาดเล็ก"
        quantity:
          type: integer
    ComboSetItemInput:
      type: object
      properties:
        combo_set_id:
          type: integer
        category_name:
          type: string
        quantity:
          type: integer
    Address:
      type: object
      properties:
        address_id:
          type: integer
        user_id:
          type: integer
        recipient_name:
          type: string
        phone_number:
          type: string
        address_label:
          type: string
        address_line1:
          type: string
        sub_district:
          type: string
        city:
          type: string
        province:
          type: string
        postal_code:
          type: string
        is_default:
          type: boolean
    AddressInput:
      type: object
      properties:
        user_id:
          type: integer
        recipient_name:
          type: string
        phone_number:
          type: string
        address_label:
          type: string
        address_line1:
          type: string
        sub_district:
          type: string
        city:
          type: string
        province:
          type: string
        postal_code:
          type: string
        is_default:
          type: boolean
    Order:
      type: object
      properties:
        order_id:
          type: integer
        user_id:
          type: integer
        address_id:
          type: integer
        total_amount:
          type: number
        status:
          type: string
          example: "Preparing"
        order_date:
          type: string
          format: date-time
        payment_method:
          type: string
    OrderInput:
      type: object
      properties:
        user_id:
          type: integer
        address_id:
          type: integer
        total_amount:
          type: number
        status:
          type: string
        payment_method:
          type: string
    OrderUpdateInput:
      type: object
      properties:
        user_id:
          type: integer
        address_id:
          type: integer
        total_amount:
          type: number
        status:
          type: string
        payment_method:
          type: string
        is_available:
          type: boolean
    OrderItem:
      type: object
      properties:
        order_item_id:
          type: integer
        order_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        price_per_unit:
          type: number
        customizations:
          type: object
          nullable: true
          example: {"size": "ถาดใหญ่", "crust": "ขอบชีส"}
    OrderItemInput:
      type: object
      properties:
        order_id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        price_per_unit:
          type: number
        customizations:
          type: object
          nullable: true